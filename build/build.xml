<project name="Retrieve and Deploy SFDC metadata" default="deployCheckOnly"
         basedir=".."
         xmlns:sf="antlib:com.salesforce"
         xmlns:ml="org.missinglink.ant.task.http.HttpClientTask">

    <import file="${basedir}/build/build_initial_deploy.xml"/>

    <taskdef resource="net/sf/antcontrib/antcontrib.properties"
             classpath="${basedir}/build/lib/ant-contrib-1.0b3.jar"/>
    <taskdef uri="antlib:com.salesforce"
             resource="com/salesforce/antlib.xml"
             classpath="${basedir}/build/lib/ant-salesforce.jar"/>
    <taskdef name="http" uri="org.missinglink.ant.task.http.HttpClientTask"
             classname="org.missinglink.ant.task.http.HttpClientTask"
             classpath="${basedir}/build/lib/ml-ant-http-1.1.3.jar"/>

    <property file="${basedir}/build/build.properties"/>
    <property environment="env"/>

    <!-- Setting default value for username & password properties to empty string
         so unset values are treated as empty. Without this, ant expressions such as ${sf.blah.username}
         will be treated literally.
    -->

    <property name="workDir" value="${basedir}/work"/>

    <condition property="sf.target.username" value="">
        <not>
            <isset property="sf.target.username"/>
        </not>
    </condition>
    <condition property="sf.target.password" value="">
        <not>
            <isset property="sf.target.password"/>
        </not>
    </condition>
    <condition property="sf.pollWaitMillis" value="100000">
        <not>
            <isset property="sf.pollWaitMillis"/>
        </not>
    </condition>
    <condition property="sf.maxPoll" value="100">
        <not>
            <isset property="sf.maxPoll"/>
        </not>
    </condition>
    <condition property="sf.rename.input" value="${basedir}/build/rename/FieldsRename.csv">
        <not>
            <isset property="sf.rename.input"/>
        </not>
    </condition>
    <condition property="sf.retrieveTarget" value="${basedir}/sf_temp">
        <not>
            <isset property="sf.retrieveTarget"/>
        </not>
    </condition>
    <condition property="sf.testLevel" value="RunLocalTests">
        <not>
            <isset property="sf.testLevel"/>
        </not>
    </condition>


    <getOrgName text="${sf.target.username}" property="derivedOrgName"/>
    <condition property="orgName" value="${sf.orgName}">
        <isset property="sf.orgName"/>
    </condition>
    <condition property="orgName" value="${derivedOrgName}">
        <not>
            <isset property="sf.orgName"/>
        </not>
    </condition>
    <condition property="sf.commSubDomain" value="${orgName}-sirono-community-developer-edition">
        <not>
            <isset property="sf.commSubDomain"/>
        </not>
    </condition>
    <condition property="sf.siteAdmin" value="${sf.target.username}">
        <not>
            <isset property="sf.siteAdmin"/>
        </not>
    </condition>

    <condition property="sirono.endpoint" value="https://toledo.stage.sirono.com">
        <not>
            <isset property="sirono.endpoint"/>
        </not>
    </condition>
    <condition property="sirono.user" value="sgullapali">
        <not>
            <isset property="sirono.user"/>
        </not>
    </condition>
    <condition property="sirono.pw" value="p@ssw0rd">
        <not>
            <isset property="sirono.pw"/>
        </not>
    </condition>

    <target name="clean" description="Removes working files from the project">
        <delete dir="${workDir}" failonerror="false" quiet="true"/>
    </target>

    <target name="retrieve">
        <echo level="info">Retrieving from: ${sf.source.username} into: ${sf.retrieveTarget}</echo>
        <delete dir="${sf.retrieveTarget}"/>
        <mkdir dir="${sf.retrieveTarget}"/>
        <sf:retrieve
            retrieveTarget="${sf.retrieveTarget}"
            username="${sf.source.username}"
            password="${sf.source.password}"
            serverurl="${sf.source.serverurl}"
            unpackaged="${basedir}/src/package.xml"/>
    </target>

    <target name="retrievePkg">
        <echo level="info">Retrieving ${sf.pkgName} from: ${sf.source.username} into: ${sf.retrieveTarget}</echo>
        <delete dir="${sf.retrieveTarget}"/>
        <mkdir dir="${sf.retrieveTarget}"/>
        <sf:retrieve
            retrieveTarget="${sf.retrieveTarget}"
            username="${sf.source.username}"
            password="${sf.source.password}"
            serverurl="${sf.source.serverurl}"
            packagenames="${sf.pkgName}"/>
    </target>

    <target name="deploy" depends="processTemplates, _deploy, runPostInstallHandler"/>

    <target name="_deploy">
        <echo level="info">Deploying to: ${sf.target.username} with test level: ${sf.testLevel}</echo>
        <sf:deploy
            username="${sf.target.username}"
            password="${sf.target.password}"
            serverurl="${sf.target.serverurl}"
            deployRoot="${basedir}/src"
            pollWaitMillis="${sf.pollWaitMillis}"
            maxPoll="${sf.maxPoll}"
            testLevel="${sf.testLevel}"
            purgeondelete="true"
            ignorewarnings="true"
            logType="Debugonly"/>
    </target>

    <target name="runPostInstallHandler">
        <echo level="info">Running post-install handler</echo>
        <executeAnonymous
            username="${sf.target.username}"
            password="${sf.target.password}"
            serverurl="${sf.target.serverurl}">
SironoPRSPostInstallHandler.initializeSironoSettings();
        </executeAnonymous>
    </target>

    <target name="createPostInstallZip">
        <delete dir="${basedir}/post_install_zip"/>
        <mkdir dir="${basedir}/post_install_zip"/>
        <property name="zip_dest" value="${basedir}/post_install_zip/sirono_PRS_post_install.zip"/>
        <zip destfile="${zip_dest}"
             basedir="${basedir}/post_install"
             excludes="**/.DS_Store, __MACOSX/*"
        />
    </target>

    <target name="deployPostInstall" depends="createPostInstallZip">
        <antcall target="deployZip">
            <param name="sf.zipFile" value="${zip_dest}"/>
            <param name="sf.testLevel" value="NoTestRun"/>
        </antcall>
    </target>

    <target name="deployZip">
        <echo level="info">Deploying zip from ${sf.zipFile} to: ${sf.target.username} with test level: ${sf.testLevel}</echo>
        <sf:deploy
            username="${sf.target.username}"
            password="${sf.target.password}"
            serverurl="${sf.target.serverurl}"
            zipfile="${sf.zipFile}"
            pollWaitMillis="${sf.pollWaitMillis}"
            maxPoll="${sf.maxPoll}"
            testLevel="${sf.testLevel}"
            logType="Debugonly"/>
    </target>

    <target name="undeployCode">
        <echo level="info">Remove metadata from: ${sf.target.username}</echo>
        <sf:deploy
            username="${sf.target.username}"
            password="${sf.target.password}"
            serverurl="${sf.target.serverurl}"
            deployRoot="${basedir}/build/undeploy"
            testLevel="NoTestRun"
            purgeOnDelete="true"
            ignoreWarnings="true"/>
    </target>

    <!-- Check only; don't remove from server -->
    <target name="undeployCheckOnly">
        <echo level="info">Validate removal of metadata from: ${sf.target.username}</echo>
        <sf:deploy
            username="${sf.target.username}"
            password="${sf.target.password}"
            serverurl="${sf.target.serverurl}"
            deployRoot="${basedir}/build/undeploy"
            ignoreWarnings="true"
            pollWaitMillis="${sf.pollWaitMillis}"
            maxPoll="${sf.maxPoll}"
            testLevel="${sf.testLevel}"
            logType="Debugonly"
            purgeOnDelete="true"
            checkOnly="true"/>
    </target>

    <target name="populateWorkSrcDir">
        <mkdir dir="${workDir}"/>
        <delete dir="${workDir}/src" failonerror="false" quiet="true"/>
        <mkdir dir="${workDir}/src"/>
        <copy todir="${workDir}/src">
            <fileset dir="${basedir}/src" includes="**/*"/>
        </copy>
    </target>

    <!-- Check only; don't save to the server -->
    <target name="deployCheckOnly" depends="processTemplates, populateWorkSrcDir">
        <echo level="info">Validating in: ${sf.target.username} with test level: ${sf.testLevel}</echo>
        <sf:deploy
            username="${sf.target.username}"
            password="${sf.target.password}"
            serverurl="${sf.target.serverurl}"
            deployRoot="${workDir}/src"
            pollWaitMillis="${sf.pollWaitMillis}"
            maxPoll="${sf.maxPoll}"
            testLevel="${sf.testLevel}"
            logType="Debugonly"
            checkOnly="true"/>
    </target>

    <!-- Check only; only run specified tests -->
    <target name="deployCheckSelectTests" depends="processTemplates, populateWorkSrcDir">
        <echo level="info">Running select tests in: ${sf.target.username}</echo>
        <sf:deploy
            username="${sf.target.username}"
            password="${sf.target.password}"
            serverurl="${sf.target.serverurl}"
            deployRoot="${workDir}/src"
            pollWaitMillis="${sf.pollWaitMillis}"
            maxPoll="${sf.maxPoll}"
            logType="Debugonly"
            checkOnly="true"
            testLevel="RunSpecifiedTests">
            <!-- TODO: Make this use a property so that the build file doesn't have to be modified -->
            <runTest>EncounterBalanceTest</runTest>
        </sf:deploy>
    </target>

    <!-- Deploy without tests -->
    <target name="deployNoTests" depends="processTemplates, _deployNoTests, runPostInstallHandler"/>

    <target name="_deployNoTests">
        <echo level="info">Deploying to: ${sf.target.username} without tests</echo>
        <sf:deploy
            username="${sf.target.username}"
            password="${sf.target.password}"
            serverurl="${sf.target.serverurl}"
            deployRoot="${basedir}/src"
            pollWaitMillis="${sf.pollWaitMillis}"
            maxPoll="${sf.maxPoll}"
            testLevel="NoTestRun"
            logType="Debugonly"/>
    </target>

    <target name="echo_environment">
        <echoproperties prefix="sf."/>
        <echoproperties prefix="env."/>
    </target>

    <condition property="metadata_type" value="CustomObject">
        <not>
            <isset property="metadata_type"/>
        </not>
    </condition>

    <macrodef name="listMetadata" description="Lists metadata of the specified type into the work directory.">
        <attribute name="metadataType"/>
        <sequential>
            <local name="listMetadataOutput"/>
            <property name="listMetadataOutput" value="${workDir}/listMetadata/list_@{metadataType}.log"/>
            <echo level="info">List metadata type: @{metadataType} from: ${sf.source.username} into: ${listMetadataOutput}</echo>
            <mkdir dir="${workDir}/listMetadata"/>
            <delete file="${listMetadataOutput}" failonerror="false" quiet="true"/>
            <sf:listMetadata
                username="${sf.source.username}"
                password="${sf.source.password}"
                serverurl="${sf.source.serverurl}"
                metadataType="@{metadataType}"
                resultFilePath="${listMetadataOutput}"/>
        </sequential>
    </macrodef>

    <target name="listMetadata">
        <listMetadata metadataType="${metadata_type}"/>
    </target>

    <target name="full_deploy" description="Full environment setup in target org"
            depends="stop_all_scheduled_jobs, deploy, schedule_all_jobs"/>

    <!-- TODO: This could be quite a bit more efficient by only deploying what's needed in the second deployNoTests -->
    <target name="initial_deploy" description="Deploy into a DE org for the first time"
            depends="preDeploy, deployPrep, deployNoTests, revertPrep, deployNoTests, remove_sample_data,
            revertPrep"/>

    <target name="rename_prep" description="Stop all scheduled jobs and undeploy"
            depends="stop_all_scheduled_jobs, undeployCode, deploy"/>

    <target name="rename_metadata">
        <java classname="com.sirono.sf_tools.MetadataUpdater"
              fork="true"
              failonerror="true">
            <arg value="${sf.rename.input}"/>
            <arg value="${sf.target.username}"/>
            <arg value="${sf.target.password}"/>
            <arg value="${sf.target.metadataurl}"/>
            <classpath>
                <fileset dir="${basedir}/build/lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
        </java>
    </target>

    <target name="stop_all_scheduled_jobs" description="Stops all scheduled jobs in the target org">
        <!-- stop all scheduled jobs -->
        <executeAnonymous
            username="${sf.target.username}"
            password="${sf.target.password}"
            serverurl="${sf.target.serverurl}">
            <![CDATA[
                    for (SObject j : [SELECT Id FROM CronTrigger]) System.abortJob(j.Id);
                ]]>
        </executeAnonymous>
    </target>

    <target name="schedule_all_jobs" depends="stop_all_scheduled_jobs">
        <echo level="info">Schedule all jobs in: ${sf.target.username}</echo>
        <!-- schedule all jobs -->
        <executeAnonymous
            username="${sf.target.username}"
            password="${sf.target.password}"
            serverurl="${sf.target.serverurl}">
            <![CDATA[
                System.schedule('PopulateNextPaymentDateBatch', '0 0 1 * * ?', new PopulateNextPaymentDateBatch());
                System.schedule('CallEarlyOutAutoCase', '0 0 1 * * ?', new CallEarlyOutAutoCase());
                System.schedule('CallPrecollectionsAutoCase', '0 0 2 * * ?', new CallPrecollectionsAutoCase());
                System.schedule('EarlyOutSchedulerBatch', '0 0 3 * * ?', new EarlyOutSchedulerBatch());
                System.schedule('DelinquentPaymentPlansSchedulerBatch', '0 0 4 * * ?', new DelinquentPaymentPlansSchedulerBatch());
                System.schedule('PreCollectionSchedulerBatch', '0 0 1 * * ?', new PreCollectionSchedulerBatch());
                System.schedule('PreServiceSchedulerBatch', '0 0 1 * * ?', new PreServiceSchedulerBatch());
            ]]>
        </executeAnonymous>
    </target>

    <target name="remove_sample_data">
        <echo level="info">Remove all sample data from dev org: ${sf.target.username}</echo>
        <executeAnonymous
            username="${sf.target.username}"
            password="${sf.target.password}"
            serverurl="${sf.target.serverurl}">
            <![CDATA[
                Opportunity[] opps = [SELECT Id FROM Opportunity];
                DELETE opps;
                Case[] cases = [SELECT Id FROM Case];
                DELETE cases;
                Lead[] leads = [SELECT Id FROM Lead];
                DELETE leads;
                Contact[] contacts = [SELECT Id FROM Contact];
                DELETE contacts;
                Campaign[] cmpns = [SELECT Id FROM Campaign];
                DELETE cmpns;
                Solution[] sols = [SELECT Id FROM Solution];
                DELETE sols;
                Account[] accts = [SELECT Id FROM Account];
                DELETE accts;
            ]]>
        </executeAnonymous>
    </target>

    <macrodef name="executeAnonymous" description="Invoke executeAnonymous using Salesforce Tooling REST API">
        <attribute name="username" description="Salesforce user name."/>
        <attribute name="password" description="Salesforce password."/>
        <attribute name="serverurl" description="Salesforce endpoint."/>
        <text name="apexcode" description="Anonymous Apex to execute."/>
        <sequential>
            <!-- Login to populate serverUrl / sessionId / instance -->
            <login username="@{username}" password="@{password}" serverurl="@{serverurl}"/>

            <!-- Execute using HTTP GET -->
            <ml:http url="${instance}/services/data/v40.0/tooling/executeAnonymous"
                     method="GET" outfile="${workDir}/executeAnonymousResult.json"
                     statusProperty="loginResponseStatus">
                <headers>
                    <header name="Authorization" value="Bearer ${sessionId}"/>
                </headers>
                <query>
                    <parameter name="anonymousBody" value="@{apexcode}"/>
                </query>
            </ml:http>

            <!-- Fail on error -->
            <loadfile property="executeAnonymousResult" srcFile="${workDir}/executeAnonymousResult.json"/>
            <fail message="Execute Anonymous failed: ${executeAnonymousResult}">
                <condition>
                    <resourcecontains resource="${workDir}/executeAnonymousResult.json" substring="&quot;success&quot;:false"/>
                </condition>
            </fail>

            <!-- Show output -->
            <echo message="${executeAnonymousResult}"/>
        </sequential>
    </macrodef>

    <macrodef name="login" description="Login to salesforce and populate serverUrl / sessionId / instance">
        <attribute name="username" description="Salesforce user name."/>
        <attribute name="password" description="Salesforce password."/>
        <attribute name="serverurl" description="Salesforce endpoint."/>
        <sequential>
            <!-- Obtain Session Id via Login SOAP service -->
            <mkdir dir="${workDir}"/>
            <ml:http url="@{serverurl}/services/Soap/c/40.0" method="POST" failonunexpected="false"
                     outfile="${workDir}/loginResult.xml" statusProperty="loginResponseStatus">
                <headers>
                    <header name="Content-Type" value="text/xml"/>
                    <header name="SOAPAction" value="login"/>
                </headers>
                <entity><![CDATA[
                    <env:Envelope xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:env='http://schemas.xmlsoap.org/soap/envelope/'>
                        <env:Body>
                            <sf:login xmlns:sf='urn:enterprise.soap.sforce.com'>
                                <sf:username>@{username}</sf:username>
                                <sf:password>@{password}</sf:password>
                            </sf:login>
                        </env:Body>
                    </env:Envelope>]]>
                </entity>
            </ml:http>

            <!-- Fail on error -->
            <loadfile property="loginResult" srcFile="${workDir}/loginResult.xml"/>
            <fail message="Login failed: ${loginResult}">
                <condition>
                    <resourcecontains resource="${workDir}/loginResult.xml" substring="faultcode"/>
                </condition>
            </fail>

            <!-- Parse response into properties -->
            <xmlproperty file="${workDir}/loginResult.xml"/>
            <echo file="${workDir}/serverUrl.txt" message="${soapenv:Envelope.soapenv:Body.loginResponse.result.serverUrl}"/>
            <echo file="${workDir}/sessionId.txt" message="${soapenv:Envelope.soapenv:Body.loginResponse.result.sessionId}"/>
            <echo file="${workDir}/instance.txt" message="${soapenv:Envelope.soapenv:Body.loginResponse.result.serverUrl}"/>
            <replaceregexp file="${workDir}/instance.txt" match="(https://[^/]+)/.*" replace="\1"/>
            <loadfile property="sessionId" srcFile="${workDir}/sessionId.txt"/>
            <loadfile property="instance" srcFile="${workDir}/instance.txt"/>
        </sequential>
    </macrodef>

</project>
