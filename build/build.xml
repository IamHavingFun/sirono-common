<project name="Retrieve and Deploy SFDC metadata" default="deployCheckOnly"
         basedir=".."
         xmlns:sf="antlib:com.salesforce"
         xmlns:ml="org.missinglink.ant.task.http.HttpClientTask">

    <taskdef uri="antlib:com.salesforce"
             resource="com/salesforce/antlib.xml"
             classpath="${basedir}/build/lib/ant-salesforce.jar"/>
    <taskdef name="http" uri="org.missinglink.ant.task.http.HttpClientTask"
             classname="org.missinglink.ant.task.http.HttpClientTask"
             classpath="${basedir}/build/lib/ml-ant-http-1.1.3.jar"/>

    <property file="${basedir}/build/build.properties"/>
    <property environment="env"/>

    <!-- Setting default value for username & password properties to empty string
         so unset values are treated as empty. Without this, ant expressions such as ${sf.blah.username}
         will be treated literally.
    -->
    <condition property="sf.target.username" value="">
        <not>
            <isset property="sf.target.username"/>
        </not>
    </condition>
    <condition property="sf.target.password" value="">
        <not>
            <isset property="sf.target.password"/>
        </not>
    </condition>
    <condition property="sf.pollWaitMillis" value="100000">
        <not>
            <isset property="sf.pollWaitMillis"/>
        </not>
    </condition>
    <condition property="sf.maxPoll" value="100">
        <not>
            <isset property="sf.maxPoll"/>
        </not>
    </condition>
    <condition property="sf.rename.input" value="${basedir}/build/rename/FieldsRename.csv">
        <not>
            <isset property="sf.rename.input"/>
        </not>
    </condition>
    <condition property="sf.retrieveTarget" value="${basedir}/sf_temp">
        <not>
            <isset property="sf.retrieveTarget"/>
        </not>
    </condition>

    <target name="retrieve">
        <echo level="info">Retrieving from: ${sf.source.username} into: ${sf.retrieveTarget}</echo>
        <delete dir="${sf.retrieveTarget}"/>
        <mkdir dir="${sf.retrieveTarget}"/>
        <sf:retrieve
                retrieveTarget="${sf.retrieveTarget}"
                username="${sf.source.username}"
                password="${sf.source.password}"
                serverurl="${sf.source.serverurl}"
                unpackaged="${basedir}/src/package.xml"/>
    </target>

    <target name="deploy">
        <echo level="info">Deploying to: ${sf.target.username}</echo>
        <sf:deploy
                username="${sf.target.username}"
                password="${sf.target.password}"
                serverurl="${sf.target.serverurl}"
                deployRoot="${basedir}/src"
                pollWaitMillis="${sf.pollWaitMillis}"
                maxPoll="${sf.maxPoll}"
                testLevel="RunLocalTests"
                logType="Debugonly"/>
    </target>

    <target name="undeployCode">
        <echo level="info">Remove metadata from: ${sf.target.username}</echo>
        <sf:deploy
                username="${sf.target.username}"
                password="${sf.target.password}"
                serverurl="${sf.target.serverurl}"
                deployRoot="${basedir}/build/undeploy"
                ignoreWarnings="true"/>
    </target>

    <!-- Check only; don't remove from server -->
    <target name="undeployCheckOnly">
        <echo level="info">Validate removal of metadata from: ${sf.target.username}</echo>
        <sf:deploy
                username="${sf.target.username}"
                password="${sf.target.password}"
                serverurl="${sf.target.serverurl}"
                deployRoot="${basedir}/build/undeploy"
                ignoreWarnings="true"
                pollWaitMillis="${sf.pollWaitMillis}"
                maxPoll="${sf.maxPoll}"
                testLevel="RunLocalTests"
                logType="Debugonly"
                checkOnly="true"/>
    </target>

    <!-- Check only; don't save to the server -->
    <target name="deployCheckOnly">
        <echo level="info">Validating in: ${sf.target.username}</echo>
        <sf:deploy
                username="${sf.target.username}"
                password="${sf.target.password}"
                serverurl="${sf.target.serverurl}"
                deployRoot="${basedir}/src"
                pollWaitMillis="${sf.pollWaitMillis}"
                maxPoll="${sf.maxPoll}"
                testLevel="RunLocalTests"
                logType="Debugonly"
                checkOnly="true"/>
    </target>

    <!-- Check only; only run specified tests -->
    <target name="deployCheckSelectTests">
        <echo level="info">Running select tests in: ${sf.target.username}</echo>
        <sf:deploy
                username="${sf.target.username}"
                password="${sf.target.password}"
                serverurl="${sf.target.serverurl}"
                deployRoot="${basedir}/src"
                pollWaitMillis="${sf.pollWaitMillis}"
                maxPoll="${sf.maxPoll}"
                logType="Debugonly"
                checkOnly="true"
                testLevel="RunSpecifiedTests">
            <runTest>EncounterBalanceTest</runTest>
        </sf:deploy>
    </target>

    <target name="echo_environment">
        <echoproperties prefix="sf."/>
        <echoproperties prefix="env."/>
    </target>

    <condition property="metadata_type" value="CustomObject">
        <not>
            <isset property="metadata_type"/>
        </not>
    </condition>

    <target name="listMetadata">
        <echo level="info">List metadata type: ${metadata_type} from: ${sf.source.username} into: ${basedir}/listMetadata/list_${metadata_type}.log</echo>
        <mkdir dir="${basedir}/listMetadata"/>
      <sf:listMetadata
        username="${sf.source.username}"
        password="${sf.source.password}"
        serverurl="${sf.source.serverurl}"
        metadataType="${metadata_type}"
        resultFilePath="${basedir}/listMetadata/list_${metadata_type}.log"/>
    </target>

    <target name="full_deploy" description="Full environment setup in target org"
            depends="stop_all_scheduled_jobs, deploy, initialize_custom_settings, schedule_all_jobs"/>

    <target name="rename_prep" description="Stop all scheduled jobs and undeploy"
            depends="stop_all_scheduled_jobs, undeployCode, deploy"/>

    <target name="rename_metadata">
       <java classname="com.sirono.sf_tools.MetadataUpdater"
               fork="true"
               failonerror="true">
                <arg value="${sf.rename.input}"/>
                <arg value="${sf.target.username}"/>
                <arg value="${sf.target.password}"/>
                <arg value="${sf.target.metadataurl}"/>
             <classpath>
                <fileset dir="${basedir}/build/lib">
                    <include name="**/*.jar"/>
                </fileset>
             </classpath>
       </java>
    </target>

    <target name="stop_all_scheduled_jobs" description="Stops all scheduled jobs in the target org">
        <!-- stop all scheduled jobs -->
        <executeAnonymous
                username="${sf.target.username}"
                password="${sf.target.password}"
                serverurl="${sf.target.serverurl}">
                <![CDATA[
                    for (SObject j : [SELECT Id FROM CronTrigger]) System.abortJob(j.Id);
                ]]>
        </executeAnonymous>
    </target>

    <target name="schedule_all_jobs" depends="stop_all_scheduled_jobs">
        <!-- schedule all jobs -->
        <executeAnonymous
                username="${sf.target.username}"
                password="${sf.target.password}"
                serverurl="${sf.target.serverurl}">
            <![CDATA[
                System.schedule('PopulateNextPaymentDateBatch', '0 0 1 * * ?', new PopulateNextPaymentDateBatch());
                System.schedule('CallEarlyOutAutoCase', '0 0 1 * * ?', new CallEarlyOutAutoCase());
                System.schedule('CallPrecollectionsAutoCase', '0 0 2 * * ?', new CallPrecollectionsAutoCase());
                System.schedule('EarlyOutSchedulerBatch', '0 0 3 * * ?', new EarlyOutSchedulerBatch());
                System.schedule('DelinquentPaymentPlansSchedulerBatch', '0 0 4 * * ?', new DelinquentPaymentPlansSchedulerBatch());
                System.schedule('PreCollectionSchedulerBatch', '0 0 1 * * ?', new PreCollectionSchedulerBatch());
                System.schedule('PreServiceSchedulerBatch', '0 0 1 * * ?', new PreServiceSchedulerBatch());
            ]]>
        </executeAnonymous>
    </target>

    <target name="initialize_custom_settings">
        <!-- execute apex to initialize custom settings -->
        <executeAnonymous
                username="${sf.target.username}"
                password="${sf.target.password}"
                serverurl="${sf.target.serverurl}">
            <![CDATA[
                SironoSettingsUtil.initializeSironoSettings();
            ]]>
        </executeAnonymous>
    </target>

    <macrodef name="executeAnonymous" description="Invoke executeAnonymous using Salesforce Tooling REST API">
        <attribute name="username" description="Salesforce user name."/>
        <attribute name="password" description="Salesforce password."/>
        <attribute name="serverurl" description="Salesforce endpoint."/>
        <text name="apexcode" description="Anonymous Apex to execute."/>
        <sequential>
            <!-- Login to populate serverUrl / sessionId / instance -->
            <login username="@{username}" password="@{password}" serverurl="@{serverurl}"/>

            <!-- Execute using HTTP GET -->
            <ml:http url="${instance}/services/data/v34.0/tooling/executeAnonymous"
                     method="GET" outfile="lib/executeAnonymousResult.json"
                     statusProperty="loginResponseStatus">
                <headers>
                    <header name="Authorization" value="Bearer ${sessionId}"/>
                </headers>
                <query>
                    <parameter name="anonymousBody" value="@{apexcode}"/>
                </query>
            </ml:http>

            <!-- Fail on error -->
            <loadfile property="executeAnonymousResult" srcFile="lib/executeAnonymousResult.json"/>
            <fail message="Execute Anonymous failed: ${executeAnonymousResult}">
                <condition>
                    <resourcecontains resource="lib/executeAnonymousResult.json" substring="&quot;success&quot;:false"/>
                </condition>
            </fail>

            <!-- Show output -->
            <echo message="${executeAnonymousResult}"/>
        </sequential>
    </macrodef>

    <macrodef name="login" description="Login to salesforce and populate serverUrl / sessionId / instance">
        <attribute name="username" description="Salesforce user name."/>
        <attribute name="password" description="Salesforce password."/>
        <attribute name="serverurl" description="Salesforce endpoint."/>
        <sequential>
            <!-- Obtain Session Id via Login SOAP service -->
            <ml:http url="@{serverurl}/services/Soap/c/34.0" method="POST" failonunexpected="false"
                     outfile="lib/loginResult.xml" statusProperty="loginResponseStatus">
                <headers>
                    <header name="Content-Type" value="text/xml"/>
                    <header name="SOAPAction" value="login"/>
                </headers>
                <entity><![CDATA[
                    <env:Envelope xmlns:xsd='http://www.w3.org/2001/XMLSchema' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' xmlns:env='http://schemas.xmlsoap.org/soap/envelope/'>
                        <env:Body>
                            <sf:login xmlns:sf='urn:enterprise.soap.sforce.com'>
                                <sf:username>@{username}</sf:username>
                                <sf:password>@{password}</sf:password>
                            </sf:login>
                        </env:Body>
                    </env:Envelope>]]>
                </entity>
            </ml:http>

            <!-- Fail on error -->
            <loadfile property="loginResult" srcFile="lib/loginResult.xml"/>
            <fail message="Login failed: ${loginResult}">
                <condition>
                    <resourcecontains resource="lib/loginResult.xml" substring="faultcode"/>
                </condition>
            </fail>

            <!-- Parse response into properties -->
            <xmlproperty file="lib/loginResult.xml"/>
            <echo file="lib/serverUrl.txt" message="${soapenv:Envelope.soapenv:Body.loginResponse.result.serverUrl}"/>
            <echo file="lib/sessionId.txt" message="${soapenv:Envelope.soapenv:Body.loginResponse.result.sessionId}"/>
            <echo file="lib/instance.txt" message="${soapenv:Envelope.soapenv:Body.loginResponse.result.serverUrl}"/>
            <replaceregexp file="lib/instance.txt" match="(https://[^/]+)/.*" replace="\1"/>
            <loadfile property="sessionId" srcFile="lib/sessionId.txt"/>
            <loadfile property="instance" srcFile="lib/instance.txt"/>
        </sequential>
    </macrodef>
</project>
