/**
 * This class tests methods implemented in CaseTriggerHandler class by performing different scenarios.
 **/

@isTest
private class CaseTriggerTest {
	
    /**
     * This method checks/verifies case comment record for relevant Case.
     **/
    static testMethod void checkGeneratedCaseCommentOfCase() {

        Map<String, Id> rtMap = new Map<String, Id>();
        for (RecordType rt: [SELECT Id, Name FROM RecordType WHERE sObjectType = 'Case']) {
            rtMap.put(rt.Name, rt.Id);
        }

        Test.startTest();
        Case c = TestUtility.generateCase(rtMap.get('Internal Case'), 'Address Change', null);
        c.Reason = 'Charge Group';
        c.Charge_Group_IDs__c = '1234,1235';
        INSERT c;

        CaseComment cc = TestUtility.generateCaseComment(c.Id);
        INSERT cc;
        Test.stopTest();

	// Check System Assert, CaseComment record created with expected commentody.
        List<CaseComment> lstCaseComment = [SELECT Id, CommentBody FROM CaseComment];
        System.assertEquals(1, lstCaseComment.Size(), 'CaseComment record not created');
        System.assertEquals('Test', lstCaseComment[0].CommentBody, 'CaseComment record created with different commentbody');
    }

    /**
     * This method verifies exception response, that generated by MockHttpResponseGenerator.
     **/
    static testMethod void checkExpectedPageMessageResponseException() {

        Test.startTest();
        TestUtility.status = 'CREATED';        
        TestUtility.statusCode = 201;
        Test.setMock(HttpCalloutMock.class, new MockHttpResponseGeneratorTest());
        String str = '1212121';
        PayStaffWSUtill.addNoteFuture(str.split(','), 'test');
        Test.stopTest();

        // Check System Assert, Exception occures during addNoteFuture process because missing or bad requires.
        List<ApexPages.Message> msgList = ApexPages.getMessages();
        Boolean isError = false;
        for (Apexpages.Message msg: msgList) {
            if (msg.getDetail().contains('JWT EXCEPTION RESPONSE')) isError  = true;
        }
        System.assert(isError, 'JWT Exception during add Note Future process.');        
    }

    /**
     * This method verifies token exception response, that generated by MockHttpResponseGenerator.
     **/
    static testMethod void checkExpectedPageMessageTokenException() {

        Test.startTest();
        TestUtility.status = 'CREATED';
        TestUtility.statusCode = 200;
        Test.setMock(HttpCalloutMock.class, new MockHttpResponseGeneratorTest());
        String str = '1212121';
        PayStaffWSUtill.addNoteFuture(str.split(','), 'test');
        Test.stopTest();

        // Check System Assert, Exception occures during addNoteFuture process because missing or bad requires.
        List<ApexPages.Message> msgList = ApexPages.getMessages();
        Boolean isError = false;
        for (Apexpages.Message msg: msgList) {
            if (msg.getDetail().contains('CSRF TOKEN EXCEPTION')) isError  = true;
        }
        System.assert(isError, 'CSRF Token Error during add Note Future process.');
    }

    /**
     * This method verifies token error exception response, that generated by MockHttpResponseGenerator.
     **/
    static testMethod void checkExpectedPageMessageJWTToken() {

        Test.startTest();
        Case cc = new Case(Description = 'Test Case', Charge_Group_IDs__c = '12345,54321');
        INSERT cc;

        TestUtility.status = 'CREATED';
        TestUtility.statusCode = 200;
        Test.setMock(HttpCalloutMock.class, new MockHttpResponseGeneratorTest());
        for (Case ob: [SELECT Id, Description, Charge_Group_IDs__c
        		FROM Case
    			WHERE Id = :cc.Id AND CreatedBy.Name != 'Sirono Integration'
    			AND Charge_Group_IDs__c != null
	]) {
            PayStaffWSUtill.addNoteFuture(ob.Charge_Group_IDs__c.split(','), ob.Description);
        }
        Test.stopTest();

        // Check System Assert, Exception occures during addNoteFuture process because missing or bad requires.
        List<ApexPages.Message> msgList = ApexPages.getMessages();
        Boolean isError = false;
        for (Apexpages.Message msg: msgList) {
            if (msg.getDetail().contains('JWT_Token')) isError = true;
        }
        System.assert(!isError, 'JWT_Token Error during add Note Future process.');
    }
    
    /**
     * Check all access rights for a read only User using runAs.
     **/
    @isTest
    static void checkAccessRights() {
        List<CaseSecurityContext> allContexts = new List<CaseSecurityContext>{CaseSecurityContext.CREATE_CONTEXT,
        	CaseSecurityContext.CREATE_WITH_GT_CONTEXT, CaseSecurityContext.CU_CREATE_WITH_ENCOUNTER_CONTEXT, 
                CaseSecurityContext.UPDATE_CONTEXT, CaseSecurityContext.UPSERT_CONTEXT, CaseSecurityContext.DELETE_CONTEXT
        };

        System.runAs(TestUtility.generateReadOnlyUser()) {
            for (CaseSecurityContext context: allContexts) {
                try {
                    context.actionAllowed();
                    System.assert(false, 'Expected permission to be denied for ' + context);
                } catch (SecurityUtils.SecurityException ex) {
                    System.debug('SecurityException : ' + ex);
                } catch (Exception e) {
                    System.assert(false, 'Expected SecurityUtils.SecurityException to be thrown, but got ' + e);
                }
            }
        }
    }
}
