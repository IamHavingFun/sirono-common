/*
 * Copyright (c) 2017-present Sirono LLC, All rights reserved
 */

/**
 * This class tests methods implemented in CaseTriggerHandler class by performing different scenarios.
 **/
@isTest
private class CaseTriggerTest {
    /**
     * This method checks/verifies case comment record for relevant Case.
     **/
    static testMethod void checkGeneratedCaseCommentOfCase() {
        Contact guarantor = TestUtility.generateGuarantorContact();
        insert guarantor;

        Contact patientContact = TestUtility.generatePatientContact();
        insert patientContact;

        Charge_Group__c chargeGroup = TestUtility.generateChargeGroup(guarantor.Id, patientContact.Id, 200.0);
        insert chargeGroup;

        // TODO: Move this to RecordTypeUtil.internalCaseRt?
        Map<String, Id> caseRecordTypesById = new Map<String, Id>();
        for (RecordType recordType: [
            SELECT Id, Name
            FROM RecordType
            WHERE sObjectType = :Case.SObjectType.getDescribe().getName()
        ]) {
            caseRecordTypesById.put(recordType.Name, recordType.Id);
        }

        Test.startTest();
        Case testCase = TestUtility.generateCase(caseRecordTypesById.get('Internal Case'), 'Address Change', null);
        testCase.Reason = 'Charge Group';
        INSERT testCase;

        CaseComment caseComment = TestUtility.generateCaseComment(testCase.Id);
        INSERT caseComment;
        Test.stopTest();

        // Check System Assert, CaseComment record created with expected commentody.
        List<CaseComment> caseComments = [SELECT Id, CommentBody FROM CaseComment];
        System.assertEquals(1, caseComments.size(), 'CaseComment record not created');
        System.assertEquals('Test', caseComments[0].CommentBody, 'CaseComment record created with different commentbody');
    }

    /**
     * This method verifies exception response, that generated by MockHttpResponseGenerator.
     **/
    static testMethod void checkExpectedPageMessageResponseException() {

        Test.startTest();
        TestUtility.status = 'CREATED';
        TestUtility.statusCode = 201;
        Test.setMock(HttpCalloutMock.class, new AuthRestClientFailMock());
        List<String> testChargeGroupIds = new List<String> { '11111', '22222' };
        PayStaffWSUtill.addNoteFuture(testChargeGroupIds, 'test');
        Test.stopTest();

        // Check System Assert, Exception occures during addNoteFuture process because missing or bad requires.
        List<ApexPages.Message> messages = ApexPages.getMessages();
        Boolean isError = false;
        for (Apexpages.Message message: messages) {
            String messageDetail = message.getDetail();
            if (messageDetail.contains(TestUtility.JSON_ERROR_BODIES.get(TestUtility.JSON_BODY_TYPE.UNAUTHORIZED))) {
                isError = true;
            }
        }
        System.assert(isError, 'JWT Exception during add Note Future process.');
    }

    /**
     * This method verifies token error exception response, that generated by MockHttpResponseGenerator.
     **/
    static testMethod void checkExpectedPageMessageJWTToken() {
        Contact guarantor = TestUtility.generateGuarantorContact();
        Contact patientContact = TestUtility.generatePatientContact();
        insert new Contact[] { guarantor, patientContact };

        Charge_Group__c chargeGroup = TestUtility.generateChargeGroup(
            guarantor.Id,
            patientContact.Id,
            200.0
        );
        insert chargeGroup;

        Test.startTest();
        Case testCase = new Case(
            Description = 'Test Case'
        );
        INSERT testCase;

        // Explicitly associate the case with a charge group
        Case_Charge_Group_Junction__c caseChargeGroupJunction = new Case_Charge_Group_Junction__c(
            Case__c = testCase.Id,
            Charge_Group__c = chargeGroup.Id
        );
        INSERT caseChargeGroupJunction;

        TestUtility.status = 'CREATED';
        TestUtility.statusCode = 200;
        Test.setMock(HttpCalloutMock.class, new MockHttpResponseGenerator());

        // NOTE: We can't filter by CreatedBy.Name in a unit test context, so query all case comments and
        // filter by creator afterward
        List<User> sironoIntegrationUsers = [SELECT Id FROM User WHERE Name = :Constants.SIRONO_INTEGRATION_USER_NAME LIMIT 1];
        User sironoIntegrationUser = (sironoIntegrationUsers.size() == 1) ? sironoIntegrationUsers.get(0) : null;
        Id sironoIntegrationUserId = sironoIntegrationUser != null ? sironoIntegrationUser.Id : null;

        for (Case thisCase: [
            SELECT Id, Description, (
                SELECT Id, Charge_Group__c
                FROM Case_Charge_Groups__r
            )
            FROM Case
            WHERE Id = :testCase.Id
            AND CreatedById != :sironoIntegrationUserId
        ]) {
            System.assert(!thisCase.Case_Charge_Groups__r.isEmpty(), 'Expected charge groups on the case.');
            List<String> chargeGroupIds = new List<String>();
            for (Case_Charge_Group_Junction__c thisCaseChargeGroupJunction : thisCase.Case_Charge_Groups__r) {
                chargeGroupIds.add(thisCaseChargeGroupJunction.Charge_Group__c);
            }
            System.assert(!chargeGroupIds.isEmpty(), 'Expected charge group IDs.');
            PayStaffWSUtill.addNoteFuture(chargeGroupIds, thisCase.Description);
        }
        Test.stopTest();

        // Check System Assert, Exception occures during addNoteFuture process because missing or bad requires.
        List<ApexPages.Message> msgList = ApexPages.getMessages();
        Boolean isError = false;
        for (Apexpages.Message msg: msgList) {
            if (msg.getDetail().contains(TestUtility.JSON_ERROR_BODIES.get(TestUtility.JSON_BODY_TYPE.UNAUTHORIZED))) {
                isError = true;
            }
        }
        System.assert(!isError, 'JWT_Token Error during add Note Future process.');
    }

    /**
     * This method tests the logic to add contact as a campaign member.
     **/
    static testMethod void createCampaignMemberRecordsTest() {
        Contact guarantorContact = TestUtility.generateGuarantorContact();
        INSERT guarantorContact;

        List<Campaign> campaigns = new List<Campaign>();
        Campaign campaign = TestUtility.generateCampaign(Constants.CAMPAIGN_NAME_OVERDUE);
        campaigns.add(campaign);

        campaign = TestUtility.generateCampaign(Constants.CAMPAIGN_NAME_OVERDUE_M);
        campaigns.add(campaign);
        INSERT campaigns;

        // Check system assert.
        List<CampaignMember> campaignMembers = [SELECT Id FROM CampaignMember WHERE ContactId = :guarantorContact.Id];
        System.assertEquals(0, campaignMembers.size(), 'Should be campaignMembers size is zero but we got ' + campaignMembers.size());

        Test.startTest();
        Case testCase = TestUtility.generateCase(RecordTypeUtil.automatedCaseRt, Constants.CASE_TYPE_OVERDUE, guarantorContact.Id);
        INSERT testCase;
        Test.stopTest();

        // Check system assert.
        campaignMembers = [SELECT Id FROM CampaignMember WHERE ContactId = :guarantorContact.Id];
        System.assertEquals(2, campaignMembers.size(), 'Expected campaignMembers size equals to 2 but we got ' + campaignMembers.size());
    }

    /**
     * This method tests the logic for Contact already exist as a member and do not add contact as a campaign member.
     **/
    static testMethod void cmpnMemberWithExistCmpnMemberTest() {
        Contact guarantorContact = TestUtility.generateGuarantorContact();
        INSERT guarantorContact;

        List<Campaign> campaigns = new List<Campaign>();
        Campaign campaign = TestUtility.generateCampaign(Constants.CASE_TYPE_PAYMENT_PLAN_ERROR);
        campaigns.add(campaign);

        campaign = TestUtility.generateCampaign(Constants.CASE_TYPE_PAYMENT_PLAN_ERROR);
        campaigns.add(campaign);
        INSERT campaigns;

        List<CampaignMember> campaignMembers = new list<CampaignMember>();
        CampaignMember campaignMember = new CampaignMember(
            CampaignId = campaigns[0].Id,
            ContactId = guarantorContact.Id,
            Status = Constants.SENT
        );
        campaignMembers.add(campaignMember);

        campaignMember = new CampaignMember(
            CampaignId = campaigns[1].Id,
            ContactId = guarantorContact.Id,
            Status = Constants.SENT
        );
        campaignMembers.add(campaignMember);

        INSERT campaignMembers;

        List<CampaignMember> queriedCampaignMembers = [SELECT Id FROM CampaignMember WHERE ContactId = :guarantorContact.Id];
        System.assertEquals(2, campaignMembers.size(), 'Should be campaignMembers size is 2 but we got ' + campaignMembers.size());

        Test.startTest();
        Case testCase = TestUtility.generateCase(RecordTypeUtil.automatedCaseRt, Constants.CASE_TYPE_PAYMENT_PLAN_ERROR, guarantorContact.Id);
        INSERT testCase;
        Test.stopTest();

        // Check system assert.
        campaignMembers = [SELECT Id FROM CampaignMember WHERE ContactId = :guarantorContact.Id];
        System.assertEquals(2, campaignMembers.size(), 'Expected campaignMembers size equals to 2 same as earlier due to \'Contact already exist\' but we got ' + campaignMembers.size());
    }

    /**
     * Check all access rights for a read only User using runAs.
     **/
    @isTest
    static void checkAccessRights() {
        List<CaseSecurityContext> allContexts = new List<CaseSecurityContext> {
            CaseSecurityContext.CREATE_CONTEXT,
            CaseSecurityContext.CREATE_WITH_GT_CONTEXT,
            CaseSecurityContext.CU_CREATE_WITH_ENCOUNTER_CONTEXT,
            CaseSecurityContext.UPDATE_CONTEXT,
            CaseSecurityContext.UPSERT_CONTEXT,
            CaseSecurityContext.DELETE_CONTEXT
        };

        System.runAs(TestUtility.generateReadOnlyUser()) {
            for (CaseSecurityContext context: allContexts) {
                try {
                    context.actionAllowed();
                    System.assert(false, 'Expected permission to be denied for ' + context);
                } catch (SecurityUtils.SecurityException ex) {
                    System.debug('SecurityException : ' + ex);
                } catch (Exception e) {
                    System.assert(false, 'Expected SecurityUtils.SecurityException to be thrown, but got ' + e);
                }
            }
        }
    }

    /**
     * Check all Read rights for a Chatter User using runAs.
     **/
    @isTest
    static void checkAccessRightsForRead() {
        List<CaseSecurityContext> allContexts = new List<CaseSecurityContext> {
            CaseSecurityContext.SELECT_CONTEXT,
            CaseSecurityContext.CU_SELECT_CONTEXT
        };

        System.runAs(TestUtility.generateChatterOnlyUser()) {
            for (CaseSecurityContext context: allContexts) {
                try {
                    context.actionAllowed();
                    System.assert(false, 'Expected permission to be denied for ' + context);
                } catch (SecurityUtils.SecurityException ex) {
                    System.debug('SecurityException : ' + ex);
                } catch (Exception e) {
                    System.assert(false, 'Expected SecurityUtils.SecurityException to be thrown, but got ' + e);
                }
            }
        }
    }
}
