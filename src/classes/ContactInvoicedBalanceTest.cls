/**
 * Tests for check Contact's Invoiced_Balance__c and Credit_Balance__c values which are generated by Formula/Roll-Up Summary.
 **/

@isTest
public with sharing class ContactInvoicedBalanceTest {

    public static final String GUARANTOR_CONTACT = 'guarantorContact';
    private static Decimal CG_SIRONO_ID = 56789;

    /**
     * This method is used to setup preliminary data to let's all testmethods to execute as expected.
     **/
    @testSetup
    public static void setupData() {
        Test.startTest();
        // Create Guarantor Contact record.
        Contact guarantorContact = TestUtility.generateGuarantorContactByName(GUARANTOR_CONTACT);
        INSERT guarantorContact;

        // Create Charge Group record with "Overdue" Sub Status.
        Charge_Group__c chargeGroup = TestUtility.generateChargeGroup(guarantorContact.Id, null, CG_SIRONO_ID);
        chargeGroup.Sirono_ID__c = CG_SIRONO_ID;
        INSERT chargeGroup;

        // Create Transaction Record.
        Transaction__c transactionObj = TestUtility.generateTransaction(chargeGroup, 1000, 'Automatic');
        INSERT transactionObj;
        Test.stopTest();

        // Check system assert.
        System.assertNotEquals(guarantorContact.Id, null, 'Contact record does not exists/created.');
    }

    private static Contact getTestContact() {
        return [
                SELECT Id, Invoiced_Balance__c, Credit_Balance__c
                FROM Contact
                WHERE LastName = :GUARANTOR_CONTACT
        ];
    }

    private static Charge_Group__c getTestChargeGroup() {
        return [
                SELECT Id, Has_Credit_Balance__c, Has_Invoiced_Balance__c
                FROM Charge_Group__c
                WHERE Sirono_ID__c = :CG_SIRONO_ID
        ];
    }

    /**
     * This method checks logic for update Invoiced_Balance__c field when CG have "Overdue" Sub Status.
     * Also check Charge Group's Has_Invoiced_Balance__c field become true or false.
     **/
    @isTest
    public static void testContactInvoicedBalance() {
        Contact guarantorContact = getTestContact();
        Charge_Group__c chargeGroup = getTestChargeGroup();

        // Check system assert.
        System.assertEquals(0, guarantorContact.Invoiced_Balance__c, 'Default Contact’s Invoiced_Balance__c is 0 but we got ' + guarantorContact.Invoiced_Balance__c);
        System.assertEquals(false, chargeGroup.Has_Invoiced_Balance__c, 'Default CG’s Has_Invoiced_Balance__c is false but we got ' + chargeGroup.Has_Invoiced_Balance__c);

        Test.startTest();
        // Update CG record with 'Overdue' sub status.
        chargeGroup.Account_Sub_Status__c = Constants.ACCT_SUBSTATUS_OVERDUE;
        UPDATE chargeGroup;
        Test.stopTest();

        // Check system assert.
        guarantorContact = getTestContact();
        chargeGroup = getTestChargeGroup();
        System.assertEquals(1000, guarantorContact.Invoiced_Balance__c, 'Expected Contact’s Invoiced_Balance__c equals to 1000 but we got ' + guarantorContact.Invoiced_Balance__c);
        System.assertEquals(true, chargeGroup.Has_Invoiced_Balance__c, 'Expected CG’s Has_Invoiced_Balance__c equals to true but we got ' + chargeGroup.Has_Invoiced_Balance__c);
    }

    /**
     * This method checks logic for update Credit_Balance__c field when CG have "Credit" Sub Status.
     * Also check Charge Group's Has_Credit_Balance__c field become true or false.
     **/
    @isTest
    public static void testContactCreditBalance() {
        Contact guarantorContact = getTestContact();
        Charge_Group__c chargeGroup = getTestChargeGroup();

        // Check system assert.
        System.assertEquals(0, guarantorContact.Credit_Balance__c, 'Default Contact’s Credit_Balance__c is 0 but we got ' + guarantorContact.Credit_Balance__c);
        System.assertEquals(false, chargeGroup.Has_Credit_Balance__c, 'Default CG’s Has_Credit_Balance__c is false but we got ' + chargeGroup.Has_Credit_Balance__c);

        Test.startTest();
        // Update CG record with 'Credit' sub status.
        chargeGroup.Account_Sub_Status__c = Constants.ACCT_SUBSTATUS_CREDIT;
        UPDATE chargeGroup;
        Test.stopTest();

        // Check system assert.
        guarantorContact = getTestContact();
        chargeGroup = getTestChargeGroup();
        System.assertEquals(1000, guarantorContact.Credit_Balance__c, 'Expected Contact’s Credit_Balance__c equals to 1000 but we got ' + guarantorContact.Credit_Balance__c);
        System.assertEquals(true, chargeGroup.Has_Credit_Balance__c, 'Expected CG’s Has_Credit_Balance__c equals to true but we got ' + chargeGroup.Has_Credit_Balance__c);
    }

    /**
     * This method checks logic for update Invoiced_Balance__c as well as Credit_Balance__c fields.
     * Also check Charge Group's Has_Invoiced_Balance__c and Has_Credit_Balance__c fields become true or false.
     **/
    @isTest
    public static void testContactInvoicedAndCreditBalance() {
        Contact guarantorContact = getTestContact();
        Charge_Group__c chargeGroup = getTestChargeGroup();

        // Check system assert.
        System.assertEquals(0, guarantorContact.Invoiced_Balance__c, 'Default Contact’s Invoiced_Balance__c is 0 but we got ' + guarantorContact.Invoiced_Balance__c);
        System.assertEquals(0, guarantorContact.Credit_Balance__c, 'Default Contact’s Credit_Balance__c is 0 but we got ' + guarantorContact.Credit_Balance__c);
        System.assertEquals(false, chargeGroup.Has_Invoiced_Balance__c, 'Default CG’s Has_Invoiced_Balance__c is false but we got ' + chargeGroup.Has_Invoiced_Balance__c);
        System.assertEquals(false, chargeGroup.Has_Credit_Balance__c, 'Default CG’s Has_Credit_Balance__c is false but we got ' + chargeGroup.Has_Credit_Balance__c);

        Test.startTest();
        // Update CG record with 'Overdue' sub status.
        chargeGroup.Account_Sub_Status__c = Constants.ACCT_SUBSTATUS_OVERDUE;
        UPDATE chargeGroup;
        Test.stopTest();

        // Check system assert.
        guarantorContact = getTestContact();
        chargeGroup = getTestChargeGroup();
        System.assertEquals(1000, guarantorContact.Invoiced_Balance__c, 'Expected Contact’s Invoiced_Balance__c equals to 1000 but we got ' + guarantorContact.Invoiced_Balance__c);
        System.assertEquals(true, chargeGroup.Has_Invoiced_Balance__c, 'Expected CG’s Has_Invoiced_Balance__c equals to true but we got ' + chargeGroup.Has_Invoiced_Balance__c);
        System.assertEquals(0, guarantorContact.Credit_Balance__c, 'Default Contact’s Credit_Balance__c is 0 but we got ' + guarantorContact.Credit_Balance__c);
        System.assertEquals(false, chargeGroup.Has_Credit_Balance__c, 'Default CG’s Has_Credit_Balance__c is false but we got ' + chargeGroup.Has_Credit_Balance__c);

        // Create Charge Group record with "Credit" Sub Status.
        Charge_Group__c cg = TestUtility.generateChargeGroup(guarantorContact.Id, null, 1234);
        cg.Sirono_ID__c = 1234;
        cg.Account_Sub_Status__c = Constants.ACCT_SUBSTATUS_CREDIT;
        INSERT cg;

        // Create Transaction Record.
        Transaction__c transactionObj = TestUtility.generateTransaction(cg, 200, 'Automatic');
        INSERT transactionObj;

        // Check system assert.
        guarantorContact = getTestContact();
        chargeGroup = getTestChargeGroup();
        System.assertEquals(1200, guarantorContact.Invoiced_Balance__c, 'Expected Contact’s Invoiced_Balance__c equals to 1200 but we got ' + guarantorContact.Invoiced_Balance__c);
        System.assertEquals(true, chargeGroup.Has_Invoiced_Balance__c, 'Expected CG’s Has_Invoiced_Balance__c equals to true but we got ' + chargeGroup.Has_Invoiced_Balance__c);
        System.assertEquals(200, guarantorContact.Credit_Balance__c, 'Expected Contact’s Credit_Balance__c equals to 200 but we got ' + guarantorContact.Credit_Balance__c);
    }

    /**
     * This method checks logic for update Invoiced_Balance__c field negative.
     **/
    @isTest
    public static void testContactInvoicedBalanceNegative() {
        Contact guarantorContact = getTestContact();
        Charge_Group__c chargeGroup = getTestChargeGroup();

        // Check system assert.
        System.assertEquals(0, guarantorContact.Invoiced_Balance__c, 'Default Contact’s Invoiced_Balance__c is 0 but we got ' + guarantorContact.Invoiced_Balance__c);
        System.assertEquals(false, chargeGroup.Has_Invoiced_Balance__c, 'Default CG’s Has_Invoiced_Balance__c is false but we got ' + chargeGroup.Has_Invoiced_Balance__c);

        Test.startTest();
        // Update CG record with 'Bad Debt' sub status.
        chargeGroup.Account_Sub_Status__c = Constants.ACCT_SUBSTATUS_BAD_DEBT;
        UPDATE chargeGroup;
        Test.stopTest();

        // Check system assert.
        guarantorContact = getTestContact();
        chargeGroup = getTestChargeGroup();
        System.assertEquals(0, guarantorContact.Invoiced_Balance__c, 'Expected Contact’s Invoiced_Balance__c is not updated and by default 0 but we got ' + guarantorContact.Invoiced_Balance__c);
        System.assertEquals(false, chargeGroup.Has_Invoiced_Balance__c, 'Expected CG’s Has_Invoiced_Balance__c is not updated and by default false but we got ' + chargeGroup.Has_Invoiced_Balance__c);
    }
}