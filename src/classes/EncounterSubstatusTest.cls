/*
 * Copyright (c) 2017-present Sirono LLC, All rights reserved
 */

/**
 * Tests for check Encounter's Substatus values which are generated by Formula.
 **/
@IsTest
public with sharing class EncounterSubstatusTest {

    public static final String GUARANTOR_CONTACT = 'guarantorContact';

    /**
     * This method is used to setup preliminary data to let's all testmethods to execute as expected.
     **/
    @TestSetup
    public static void setupData() {
        Test.startTest();
        // Create Guarantor Contact record.
        Contact guarantorContact = TestUtility.generateGuarantorContactByName(GUARANTOR_CONTACT);
        insert guarantorContact;

        // Create Encounter record.
        Encounter__c encounter = TestUtility.generateEncounter(guarantorContact.Id, 500, System.today());
        encounter.Department__c = 'Test Dept';
        insert encounter;
        Test.stopTest();

        // Check system assert.
        System.assertNotEquals(encounter.Id, null, 'Encounter record does not exists/created.');
    }

    private static Encounter__c getTestEncounter() {
        return [
            SELECT Id, Patient_Portion__c, Billed_Charge_Group_Count__c, Encounter_Substatus__c, Balance__c
            FROM Encounter__c
            WHERE Department__c = 'Test Dept'
        ];
    }

    /**
     * This method checks logic for update Encounter_Substatus__c field when Status__c equals to 'In Process' or 'Error'.
     **/
    @IsTest
    public static void testEncounterSubstatusUnavailable() {
        Contact guarantorContact = [SELECT Id FROM Contact WHERE Name = :GUARANTOR_CONTACT LIMIT 1];
        Encounter__c encounter = getTestEncounter();

        Test.startTest();
        // Update Encounter record with 'In Process' status.
        encounter.Status__c = 'In Process';
        update encounter;
        Test.stopTest();

        // Check system assert.
        encounter = getTestEncounter();
        System.assertEquals('Unavailable', encounter.Encounter_Substatus__c, 'Expected Encounter_Substatus__c equals to "Unavailable" but we got ' + encounter.Encounter_Substatus__c);

        // Update Encounter record with 'Error' status.
        encounter.Status__c = 'Error';
        update encounter;

        // Check system assert.
        encounter = getTestEncounter();
        System.assertEquals('Unavailable', encounter.Encounter_Substatus__c, 'Expected Encounter_Substatus__c equals to "Unavailable" but we got ' + encounter.Encounter_Substatus__c);
    }

    /**
     * This method checks logic for update Encounter_Substatus__c field when Status__c equals to 'Cancelled'.
     **/
    @IsTest
    public static void testEncounterSubstatusCancelled() {
        Contact guarantorContact = [SELECT Id FROM Contact WHERE Name = :GUARANTOR_CONTACT LIMIT 1];
        Encounter__c encounter = getTestEncounter();

        Test.startTest();
        // Update Encounter record with 'Cancelled' status.
        encounter.Status__c = 'Cancelled';
        update encounter;
        Test.stopTest();

        // Check system assert.
        encounter = getTestEncounter();
        System.assertEquals('Cancelled', encounter.Encounter_Substatus__c, 'Expected Encounter_Substatus__c equals to "Cancelled" but we got ' + encounter.Encounter_Substatus__c);
    }

    /**
     * This method checks logic for update Encounter_Substatus__c field when Status__c equals to 'Ready' and Billed_Charge_Group_Count__c equals to 0
     * and Balance__c greater than 0.
     **/
    @IsTest
    public static void testEncounterSubstatusPaymentDue() {
        Contact guarantorContact = [SELECT Id FROM Contact WHERE Name = :GUARANTOR_CONTACT LIMIT 1];
        Encounter__c encounter = getTestEncounter();

        Test.startTest();
        // Update Encounter record with 'Ready' status.
        encounter.Status__c = 'Ready';
        update encounter;
        Test.stopTest();

        // Check system assert.
        encounter = getTestEncounter();
        System.assertEquals('Payment Due', encounter.Encounter_Substatus__c, 'Expected Encounter_Substatus__c equals to "Payment Due" but we got ' + encounter.Encounter_Substatus__c);
        System.assertEquals(0, encounter.Billed_Charge_Group_Count__c, 'Bill_Charge_Group should have defaulted to 0 but we got ' + encounter.Billed_Charge_Group_Count__c);
        System.assert(encounter.Balance__c > 0, 'Balance__c should have greater than 0 but we got ' + encounter.Balance__c);
    }

    /**
     * This method checks logic for update Encounter_Substatus__c field when Status__c equals to 'Ready' and create payment for encounter.
     **/
    @IsTest
    public static void testEncounterSubstatusPaid() {
        Contact guarantorContact = [SELECT Id FROM Contact WHERE Name = :GUARANTOR_CONTACT LIMIT 1];
        Encounter__c encounter = getTestEncounter();

        Test.startTest();
        // Create/Insert payment record for Encounter.
        PaymentService.createNewPayment(guarantorContact.Id, 500, encounter.Id, System.now(), null);

        // Update Encounter record with 'Ready' status.
        encounter = getTestEncounter();
        encounter.Status__c = 'Ready';
        update encounter;
        Test.stopTest();

        // Check system assert.
        encounter = getTestEncounter();
        System.assertEquals('Paid', encounter.Encounter_Substatus__c, 'Expected Encounter_Substatus__c equals to "Paid" but we got ' + encounter.Encounter_Substatus__c);
        System.assertEquals(0, encounter.Balance__c, 'Expected Balance__c equals to 0 but we got ' + encounter.Balance__c);
    }

    /**
     * This method checks logic for update Encounter_Substatus__c field when Status__c equals to 'Ready' and Billed_Charge_Group_Count__c greater than 0.
     **/
    @IsTest
    public static void testEncounterSubstatusServiced() {
        Contact guarantorContact = [SELECT Id FROM Contact WHERE Name = :GUARANTOR_CONTACT LIMIT 1];
        Encounter__c encounter = getTestEncounter();

        Test.startTest();
        // Insert CG record.
        Charge_Group__c chargeGroup = TestUtility.generateChargeGroup(guarantorContact.Id, null, 1214);
        chargeGroup.Encounter__c = encounter.Id;
        insert chargeGroup;

        // Update Encounter record with 'Ready' status.
        encounter = getTestEncounter();
        encounter.Status__c = 'Ready';
        update encounter;
        Test.stopTest();

        // Check system assert.
        encounter = getTestEncounter();
        System.assertEquals('Serviced', encounter.Encounter_Substatus__c, 'Expected Encounter_Substatus__c equals to "Serviced" but we got ' + encounter.Encounter_Substatus__c);
        System.assertEquals(1, encounter.Billed_Charge_Group_Count__c, 'Expected Billed_Charge_Group_Count__c equals to 1 but we got' + encounter.Billed_Charge_Group_Count__c);
    }

    /**
     * This method checks logic for Encounter_Substatus__c field not update when Status__c is null. (Negative Test)
     **/
    @IsTest
    public static void testEncounterSubstatusNegative() {
        Contact guarantorContact = [SELECT Id FROM Contact WHERE Name = :GUARANTOR_CONTACT LIMIT 1];
        Encounter__c encounter = getTestEncounter();

        Test.startTest();
        // Update Encounter record with null status.
        encounter.Status__c = null;
        update encounter;
        Test.stopTest();

        // Check system assert.
        encounter = getTestEncounter();
        System.assertEquals(null, encounter.Encounter_Substatus__c, 'Encounter_Substatus__c should have defaulted null but we got ' + encounter.Encounter_Substatus__c);
    }
}